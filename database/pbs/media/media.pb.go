// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: media.proto

package media

import (
	helper "github.com/rzaf/youtube-clone/database/pbs/helper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EidtMediaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string           `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Text          string           `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Url           string           `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	CurrentUserId int64            `protobuf:"varint,4,opt,name=CurrentUserId,proto3" json:"CurrentUserId,omitempty"`
	TypeId        helper.MediaType `protobuf:"varint,5,opt,name=TypeId,proto3,enum=helper.MediaType" json:"TypeId,omitempty"` //0:video 1:music 2:photo
}

func (x *EidtMediaData) Reset() {
	*x = EidtMediaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EidtMediaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EidtMediaData) ProtoMessage() {}

func (x *EidtMediaData) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EidtMediaData.ProtoReflect.Descriptor instead.
func (*EidtMediaData) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *EidtMediaData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EidtMediaData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EidtMediaData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EidtMediaData) GetCurrentUserId() int64 {
	if x != nil {
		return x.CurrentUserId
	}
	return 0
}

func (x *EidtMediaData) GetTypeId() helper.MediaType {
	if x != nil {
		return x.TypeId
	}
	return helper.MediaType(0)
}

type MediaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title               string `protobuf:"bytes,1,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	Text                string `protobuf:"bytes,2,opt,name=Text,json=description,proto3" json:"Text,omitempty"`
	Url                 string `protobuf:"bytes,3,opt,name=Url,json=url,proto3" json:"Url,omitempty"`
	Type                string `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	CreatedAt           int64  `protobuf:"varint,5,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt           int64  `protobuf:"varint,6,opt,name=UpdatedAt,json=updated_at_unix,proto3" json:"UpdatedAt,omitempty"`
	Thumbnail           string `protobuf:"bytes,7,opt,name=Thumbnail,json=thumbnail,proto3" json:"Thumbnail,omitempty"`
	CreatorUsername     string `protobuf:"bytes,8,opt,name=CreatorUsername,json=creator_username,proto3" json:"CreatorUsername,omitempty"`
	CreatorProfile      string `protobuf:"bytes,9,opt,name=CreatorProfile,json=creator_profile,proto3" json:"CreatorProfile,omitempty"`
	ChannelName         string `protobuf:"bytes,10,opt,name=ChannelName,json=creator_channel_name,proto3" json:"ChannelName,omitempty"`
	Tags                string `protobuf:"bytes,11,opt,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	UserSubscribesCount int64  `protobuf:"varint,12,opt,name=UserSubscribesCount,json=creator_subscribers_count,proto3" json:"UserSubscribesCount,omitempty"`
	ViewsCount          int64  `protobuf:"varint,13,opt,name=ViewsCount,json=views_count,proto3" json:"ViewsCount,omitempty"`
	LikesCount          int64  `protobuf:"varint,14,opt,name=LikesCount,json=likes_count,proto3" json:"LikesCount,omitempty"`
	DislikesCount       int64  `protobuf:"varint,15,opt,name=DislikesCount,json=dislikes_count,proto3" json:"DislikesCount,omitempty"`
	CommentsCount       int64  `protobuf:"varint,16,opt,name=CommentsCount,json=comments_count,proto3" json:"CommentsCount,omitempty"`
	UserLike            string `protobuf:"bytes,17,opt,name=UserLike,json=current_user_like,proto3" json:"UserLike,omitempty"`
	IsUserSubbed        bool   `protobuf:"varint,18,opt,name=IsUserSubbed,json=is_curretn_user_subbed,proto3" json:"IsUserSubbed,omitempty"`
}

func (x *MediaData) Reset() {
	*x = MediaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaData) ProtoMessage() {}

func (x *MediaData) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaData.ProtoReflect.Descriptor instead.
func (*MediaData) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *MediaData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MediaData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MediaData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MediaData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MediaData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MediaData) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *MediaData) GetCreatorUsername() string {
	if x != nil {
		return x.CreatorUsername
	}
	return ""
}

func (x *MediaData) GetCreatorProfile() string {
	if x != nil {
		return x.CreatorProfile
	}
	return ""
}

func (x *MediaData) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *MediaData) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *MediaData) GetUserSubscribesCount() int64 {
	if x != nil {
		return x.UserSubscribesCount
	}
	return 0
}

func (x *MediaData) GetViewsCount() int64 {
	if x != nil {
		return x.ViewsCount
	}
	return 0
}

func (x *MediaData) GetLikesCount() int64 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

func (x *MediaData) GetDislikesCount() int64 {
	if x != nil {
		return x.DislikesCount
	}
	return 0
}

func (x *MediaData) GetCommentsCount() int64 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *MediaData) GetUserLike() string {
	if x != nil {
		return x.UserLike
	}
	return ""
}

func (x *MediaData) GetIsUserSubbed() bool {
	if x != nil {
		return x.IsUserSubbed
	}
	return false
}

type MediaShortData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	Url             string `protobuf:"bytes,2,opt,name=Url,json=url,proto3" json:"Url,omitempty"`
	CreatorUsername string `protobuf:"bytes,3,opt,name=CreatorUsername,json=creator_username,proto3" json:"CreatorUsername,omitempty"`
	ChannelName     string `protobuf:"bytes,4,opt,name=ChannelName,json=creator_channel_name,proto3" json:"ChannelName,omitempty"`
	ViewsCount      int64  `protobuf:"varint,5,opt,name=ViewsCount,json=views_count,proto3" json:"ViewsCount,omitempty"`
	CreatedAt       int64  `protobuf:"varint,6,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	UserLike        string `protobuf:"bytes,7,opt,name=UserLike,json=current_user_like,proto3" json:"UserLike,omitempty"`
	MediaType       string `protobuf:"bytes,8,opt,name=MediaType,json=type,proto3" json:"MediaType,omitempty"`
	Thumbnail       string `protobuf:"bytes,9,opt,name=Thumbnail,json=thumbnail,proto3" json:"Thumbnail,omitempty"`
	CreatorProfile  string `protobuf:"bytes,10,opt,name=CreatorProfile,json=creator_profile,proto3" json:"CreatorProfile,omitempty"`
}

func (x *MediaShortData) Reset() {
	*x = MediaShortData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaShortData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaShortData) ProtoMessage() {}

func (x *MediaShortData) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaShortData.ProtoReflect.Descriptor instead.
func (*MediaShortData) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *MediaShortData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MediaShortData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaShortData) GetCreatorUsername() string {
	if x != nil {
		return x.CreatorUsername
	}
	return ""
}

func (x *MediaShortData) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *MediaShortData) GetViewsCount() int64 {
	if x != nil {
		return x.ViewsCount
	}
	return 0
}

func (x *MediaShortData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MediaShortData) GetUserLike() string {
	if x != nil {
		return x.UserLike
	}
	return ""
}

func (x *MediaShortData) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *MediaShortData) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *MediaShortData) GetCreatorProfile() string {
	if x != nil {
		return x.CreatorProfile
	}
	return ""
}

type MediasData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Medias    []*MediaShortData `protobuf:"bytes,1,rep,name=Medias,json=medias,proto3" json:"Medias,omitempty"`
	PagesInfo *helper.PagesInfo `protobuf:"bytes,2,opt,name=PagesInfo,json=pages_info,proto3" json:"PagesInfo,omitempty"`
}

func (x *MediasData) Reset() {
	*x = MediasData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediasData) ProtoMessage() {}

func (x *MediasData) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediasData.ProtoReflect.Descriptor instead.
func (*MediasData) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

func (x *MediasData) GetMedias() []*MediaShortData {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *MediasData) GetPagesInfo() *helper.PagesInfo {
	if x != nil {
		return x.PagesInfo
	}
	return nil
}

type MediaUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaUrl      string `protobuf:"bytes,1,opt,name=MediaUrl,proto3" json:"MediaUrl,omitempty"`
	CurrentUserId int64  `protobuf:"varint,2,opt,name=CurrentUserId,proto3" json:"CurrentUserId,omitempty"`
}

func (x *MediaUrl) Reset() {
	*x = MediaUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaUrl) ProtoMessage() {}

func (x *MediaUrl) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaUrl.ProtoReflect.Descriptor instead.
func (*MediaUrl) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (x *MediaUrl) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *MediaUrl) GetCurrentUserId() int64 {
	if x != nil {
		return x.CurrentUserId
	}
	return 0
}

type TagMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName       string `protobuf:"bytes,1,opt,name=TagName,proto3" json:"TagName,omitempty"`
	MediaUrl      string `protobuf:"bytes,2,opt,name=MediaUrl,proto3" json:"MediaUrl,omitempty"`
	CurrentUserId int64  `protobuf:"varint,3,opt,name=CurrentUserId,proto3" json:"CurrentUserId,omitempty"`
}

func (x *TagMedia) Reset() {
	*x = TagMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMedia) ProtoMessage() {}

func (x *TagMedia) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMedia.ProtoReflect.Descriptor instead.
func (*TagMedia) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (x *TagMedia) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TagMedia) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *TagMedia) GetCurrentUserId() int64 {
	if x != nil {
		return x.CurrentUserId
	}
	return 0
}

type MediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type helper.MediaType `protobuf:"varint,1,opt,name=Type,proto3,enum=helper.MediaType" json:"Type,omitempty"`
	Page *helper.Paging   `protobuf:"bytes,2,opt,name=Page,proto3" json:"Page,omitempty"`
	// int32 PerPage = 2; // limit
	// int32 PageNumber = 3; // offset
	UserName   string          `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Sort       helper.SortType `protobuf:"varint,4,opt,name=Sort,proto3,enum=helper.SortType" json:"Sort,omitempty"`
	SearchTerm string          `protobuf:"bytes,5,opt,name=SearchTerm,proto3" json:"SearchTerm,omitempty"` // bool isAllTypes = 6;
}

func (x *MediaReq) Reset() {
	*x = MediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaReq) ProtoMessage() {}

func (x *MediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaReq.ProtoReflect.Descriptor instead.
func (*MediaReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *MediaReq) GetType() helper.MediaType {
	if x != nil {
		return x.Type
	}
	return helper.MediaType(0)
}

func (x *MediaReq) GetPage() *helper.Paging {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MediaReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *MediaReq) GetSort() helper.SortType {
	if x != nil {
		return x.Sort
	}
	return helper.SortType(0)
}

func (x *MediaReq) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Res:
	//
	//	*Response_Media
	//	*Response_Err
	//	*Response_Empty
	//	*Response_Medias
	Res isResponse_Res `protobuf_oneof:"Res"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (m *Response) GetRes() isResponse_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (x *Response) GetMedia() *MediaData {
	if x, ok := x.GetRes().(*Response_Media); ok {
		return x.Media
	}
	return nil
}

func (x *Response) GetErr() *helper.HttpError {
	if x, ok := x.GetRes().(*Response_Err); ok {
		return x.Err
	}
	return nil
}

func (x *Response) GetEmpty() *helper.Empty {
	if x, ok := x.GetRes().(*Response_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Response) GetMedias() *MediasData {
	if x, ok := x.GetRes().(*Response_Medias); ok {
		return x.Medias
	}
	return nil
}

type isResponse_Res interface {
	isResponse_Res()
}

type Response_Media struct {
	Media *MediaData `protobuf:"bytes,1,opt,name=Media,proto3,oneof"`
}

type Response_Err struct {
	Err *helper.HttpError `protobuf:"bytes,2,opt,name=Err,proto3,oneof"`
}

type Response_Empty struct {
	Empty *helper.Empty `protobuf:"bytes,3,opt,name=empty,proto3,oneof"`
}

type Response_Medias struct {
	Medias *MediasData `protobuf:"bytes,4,opt,name=Medias,proto3,oneof"` // UserApikey UserApi=2;
}

func (*Response_Media) isResponse_Res() {}

func (*Response_Err) isResponse_Res() {}

func (*Response_Empty) isResponse_Res() {}

func (*Response_Medias) isResponse_Res() {}

var File_media_proto protoreflect.FileDescriptor

var file_media_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x1a, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x45, 0x69, 0x64, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x22, 0xf6, 0x04, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x36, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x6b, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x0c,
	0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x62, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x74, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x62, 0x65, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x0e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x56,
	0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x12, 0x23, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x17, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x66, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x65, 0x72, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x45,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x45,
	0x72, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x32, 0xe9, 0x04,
	0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x12, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x12, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x45, 0x69, 0x64, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x14, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x45, 0x69, 0x64, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x45, 0x69, 0x64, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x45, 0x69, 0x64, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0f, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x0f,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0f,
	0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x7a, 0x61, 0x66, 0x2f, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData = file_media_proto_rawDesc
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_proto_rawDescData)
	})
	return file_media_proto_rawDescData
}

var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_media_proto_goTypes = []interface{}{
	(*EidtMediaData)(nil),    // 0: media.EidtMediaData
	(*MediaData)(nil),        // 1: media.MediaData
	(*MediaShortData)(nil),   // 2: media.MediaShortData
	(*MediasData)(nil),       // 3: media.MediasData
	(*MediaUrl)(nil),         // 4: media.MediaUrl
	(*TagMedia)(nil),         // 5: media.TagMedia
	(*MediaReq)(nil),         // 6: media.MediaReq
	(*Response)(nil),         // 7: media.Response
	(helper.MediaType)(0),    // 8: helper.MediaType
	(*helper.PagesInfo)(nil), // 9: helper.PagesInfo
	(*helper.Paging)(nil),    // 10: helper.Paging
	(helper.SortType)(0),     // 11: helper.SortType
	(*helper.HttpError)(nil), // 12: helper.HttpError
	(*helper.Empty)(nil),     // 13: helper.Empty
	(*helper.LikeReq)(nil),   // 14: helper.LikeReq
}
var file_media_proto_depIdxs = []int32{
	8,  // 0: media.EidtMediaData.TypeId:type_name -> helper.MediaType
	2,  // 1: media.MediasData.Medias:type_name -> media.MediaShortData
	9,  // 2: media.MediasData.PagesInfo:type_name -> helper.PagesInfo
	8,  // 3: media.MediaReq.Type:type_name -> helper.MediaType
	10, // 4: media.MediaReq.Page:type_name -> helper.Paging
	11, // 5: media.MediaReq.Sort:type_name -> helper.SortType
	1,  // 6: media.Response.Media:type_name -> media.MediaData
	12, // 7: media.Response.Err:type_name -> helper.HttpError
	13, // 8: media.Response.empty:type_name -> helper.Empty
	3,  // 9: media.Response.Medias:type_name -> media.MediasData
	4,  // 10: media.MediaService.GetMediaByUrl:input_type -> media.MediaUrl
	6,  // 11: media.MediaService.SearchMedias:input_type -> media.MediaReq
	6,  // 12: media.MediaService.GetMedias:input_type -> media.MediaReq
	0,  // 13: media.MediaService.CreateMedia:input_type -> media.EidtMediaData
	0,  // 14: media.MediaService.EditMedia:input_type -> media.EidtMediaData
	0,  // 15: media.MediaService.SetMediaThumbnail:input_type -> media.EidtMediaData
	0,  // 16: media.MediaService.DeleteMedia:input_type -> media.EidtMediaData
	5,  // 17: media.MediaService.AddTagToMedia:input_type -> media.TagMedia
	5,  // 18: media.MediaService.RemoveTagFromMedia:input_type -> media.TagMedia
	14, // 19: media.MediaService.CreateLikeMedia:input_type -> helper.LikeReq
	14, // 20: media.MediaService.DeleteLikeMedia:input_type -> helper.LikeReq
	7,  // 21: media.MediaService.GetMediaByUrl:output_type -> media.Response
	7,  // 22: media.MediaService.SearchMedias:output_type -> media.Response
	7,  // 23: media.MediaService.GetMedias:output_type -> media.Response
	7,  // 24: media.MediaService.CreateMedia:output_type -> media.Response
	7,  // 25: media.MediaService.EditMedia:output_type -> media.Response
	7,  // 26: media.MediaService.SetMediaThumbnail:output_type -> media.Response
	7,  // 27: media.MediaService.DeleteMedia:output_type -> media.Response
	7,  // 28: media.MediaService.AddTagToMedia:output_type -> media.Response
	7,  // 29: media.MediaService.RemoveTagFromMedia:output_type -> media.Response
	7,  // 30: media.MediaService.CreateLikeMedia:output_type -> media.Response
	7,  // 31: media.MediaService.DeleteLikeMedia:output_type -> media.Response
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EidtMediaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaShortData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediasData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_media_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Response_Media)(nil),
		(*Response_Err)(nil),
		(*Response_Empty)(nil),
		(*Response_Medias)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_rawDesc = nil
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
