// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: comment.proto

package comment

import (
	helper "github.com/rzaf/youtube-clone/database/pbs/helper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EditCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text          string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	Url           string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	MediaUrl      string `protobuf:"bytes,3,opt,name=MediaUrl,proto3" json:"MediaUrl,omitempty"`
	ReplyUrl      string `protobuf:"bytes,4,opt,name=ReplyUrl,proto3" json:"ReplyUrl,omitempty"`
	CurrentUserId int64  `protobuf:"varint,5,opt,name=CurrentUserId,proto3" json:"CurrentUserId,omitempty"`
}

func (x *EditCommentData) Reset() {
	*x = EditCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCommentData) ProtoMessage() {}

func (x *EditCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCommentData.ProtoReflect.Descriptor instead.
func (*EditCommentData) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{0}
}

func (x *EditCommentData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EditCommentData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EditCommentData) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *EditCommentData) GetReplyUrl() string {
	if x != nil {
		return x.ReplyUrl
	}
	return ""
}

func (x *EditCommentData) GetCurrentUserId() int64 {
	if x != nil {
		return x.CurrentUserId
	}
	return 0
}

type FullCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=Text,json=text,proto3" json:"Text,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=Url,json=url,proto3" json:"Url,omitempty"`
	CreatedAt int64  `protobuf:"varint,3,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,4,opt,name=UpdatedAt,json=updated_at_unix,proto3" json:"UpdatedAt,omitempty"`
	// extra
	Username            string `protobuf:"bytes,5,opt,name=Username,json=creator_username,proto3" json:"Username,omitempty"`
	UserProfile         string `protobuf:"bytes,6,opt,name=UserProfile,json=creator_profile,proto3" json:"UserProfile,omitempty"`
	RepliesCount        int64  `protobuf:"varint,7,opt,name=RepliesCount,json=replies_count,proto3" json:"RepliesCount,omitempty"`
	LikesCount          int64  `protobuf:"varint,8,opt,name=LikesCount,json=likes_count,proto3" json:"LikesCount,omitempty"`
	DislikesCount       int64  `protobuf:"varint,9,opt,name=DislikesCount,json=dislikes_count,proto3" json:"DislikesCount,omitempty"`
	ReplyUrl            string `protobuf:"bytes,10,opt,name=ReplyUrl,json=reply_url,proto3" json:"ReplyUrl,omitempty"`
	ReplyUserName       string `protobuf:"bytes,11,opt,name=ReplyUserName,json=reply_username,proto3" json:"ReplyUserName,omitempty"`
	ReplyText           string `protobuf:"bytes,12,opt,name=ReplyText,json=reply_text,proto3" json:"ReplyText,omitempty"`
	ReplyUserProfile    string `protobuf:"bytes,13,opt,name=ReplyUserProfile,json=reply_creator_profile,proto3" json:"ReplyUserProfile,omitempty"`
	UserLike            string `protobuf:"bytes,14,opt,name=UserLike,json=current_user_like,proto3" json:"UserLike,omitempty"`
	MediaUrl            string `protobuf:"bytes,15,opt,name=MediaUrl,json=media_url,proto3" json:"MediaUrl,omitempty"`
	MediaTitle          string `protobuf:"bytes,16,opt,name=MediaTitle,json=media_title,proto3" json:"MediaTitle,omitempty"`
	MediaType           string `protobuf:"bytes,17,opt,name=MediaType,json=media_type,proto3" json:"MediaType,omitempty"`
	MediaCreatedAt      int64  `protobuf:"varint,18,opt,name=MediaCreatedAt,json=media_created_at_unix,proto3" json:"MediaCreatedAt,omitempty"`
	MediaThumbnail      string `protobuf:"bytes,19,opt,name=MediaThumbnail,json=media_thumbnail,proto3" json:"MediaThumbnail,omitempty"`
	MediaCreator        string `protobuf:"bytes,20,opt,name=MediaCreator,json=media_creator_username,proto3" json:"MediaCreator,omitempty"`
	MediaCraetorProfile string `protobuf:"bytes,21,opt,name=MediaCraetorProfile,json=media_creator_profile,proto3" json:"MediaCraetorProfile,omitempty"`
}

func (x *FullCommentData) Reset() {
	*x = FullCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCommentData) ProtoMessage() {}

func (x *FullCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCommentData.ProtoReflect.Descriptor instead.
func (*FullCommentData) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{1}
}

func (x *FullCommentData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FullCommentData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FullCommentData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FullCommentData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FullCommentData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FullCommentData) GetUserProfile() string {
	if x != nil {
		return x.UserProfile
	}
	return ""
}

func (x *FullCommentData) GetRepliesCount() int64 {
	if x != nil {
		return x.RepliesCount
	}
	return 0
}

func (x *FullCommentData) GetLikesCount() int64 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

func (x *FullCommentData) GetDislikesCount() int64 {
	if x != nil {
		return x.DislikesCount
	}
	return 0
}

func (x *FullCommentData) GetReplyUrl() string {
	if x != nil {
		return x.ReplyUrl
	}
	return ""
}

func (x *FullCommentData) GetReplyUserName() string {
	if x != nil {
		return x.ReplyUserName
	}
	return ""
}

func (x *FullCommentData) GetReplyText() string {
	if x != nil {
		return x.ReplyText
	}
	return ""
}

func (x *FullCommentData) GetReplyUserProfile() string {
	if x != nil {
		return x.ReplyUserProfile
	}
	return ""
}

func (x *FullCommentData) GetUserLike() string {
	if x != nil {
		return x.UserLike
	}
	return ""
}

func (x *FullCommentData) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *FullCommentData) GetMediaTitle() string {
	if x != nil {
		return x.MediaTitle
	}
	return ""
}

func (x *FullCommentData) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *FullCommentData) GetMediaCreatedAt() int64 {
	if x != nil {
		return x.MediaCreatedAt
	}
	return 0
}

func (x *FullCommentData) GetMediaThumbnail() string {
	if x != nil {
		return x.MediaThumbnail
	}
	return ""
}

func (x *FullCommentData) GetMediaCreator() string {
	if x != nil {
		return x.MediaCreator
	}
	return ""
}

func (x *FullCommentData) GetMediaCraetorProfile() string {
	if x != nil {
		return x.MediaCraetorProfile
	}
	return ""
}

type CommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text               string `protobuf:"bytes,1,opt,name=Text,json=text,proto3" json:"Text,omitempty"`
	Url                string `protobuf:"bytes,2,opt,name=Url,json=url,proto3" json:"Url,omitempty"`
	CreatedAt          int64  `protobuf:"varint,6,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt          int64  `protobuf:"varint,7,opt,name=UpdatedAt,json=updated_at_unix,proto3" json:"UpdatedAt,omitempty"`
	CreatorUsername    string `protobuf:"bytes,8,opt,name=CreatorUsername,json=creator_username,proto3" json:"CreatorUsername,omitempty"`
	CreatorUserProfile string `protobuf:"bytes,9,opt,name=CreatorUserProfile,json=creator_profile,proto3" json:"CreatorUserProfile,omitempty"`
	RepliesCount       int64  `protobuf:"varint,10,opt,name=RepliesCount,json=replies_count,proto3" json:"RepliesCount,omitempty"`
	LikesCount         int64  `protobuf:"varint,11,opt,name=LikesCount,json=likes_count,proto3" json:"LikesCount,omitempty"`
	DislikesCount      int64  `protobuf:"varint,12,opt,name=DislikesCount,json=dislikes_count,proto3" json:"DislikesCount,omitempty"`
	ReplyUrl           string `protobuf:"bytes,13,opt,name=ReplyUrl,json=reply_url,proto3" json:"ReplyUrl,omitempty"`
	ReplyUserName      string `protobuf:"bytes,14,opt,name=ReplyUserName,json=reply_username,proto3" json:"ReplyUserName,omitempty"`
	MediaUrl           string `protobuf:"bytes,15,opt,name=MediaUrl,json=media_url,proto3" json:"MediaUrl,omitempty"`
	UserLike           string `protobuf:"bytes,16,opt,name=UserLike,json=current_user_like,proto3" json:"UserLike,omitempty"`
}

func (x *CommentData) Reset() {
	*x = CommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentData) ProtoMessage() {}

func (x *CommentData) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentData.ProtoReflect.Descriptor instead.
func (*CommentData) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{2}
}

func (x *CommentData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CommentData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CommentData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CommentData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CommentData) GetCreatorUsername() string {
	if x != nil {
		return x.CreatorUsername
	}
	return ""
}

func (x *CommentData) GetCreatorUserProfile() string {
	if x != nil {
		return x.CreatorUserProfile
	}
	return ""
}

func (x *CommentData) GetRepliesCount() int64 {
	if x != nil {
		return x.RepliesCount
	}
	return 0
}

func (x *CommentData) GetLikesCount() int64 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

func (x *CommentData) GetDislikesCount() int64 {
	if x != nil {
		return x.DislikesCount
	}
	return 0
}

func (x *CommentData) GetReplyUrl() string {
	if x != nil {
		return x.ReplyUrl
	}
	return ""
}

func (x *CommentData) GetReplyUserName() string {
	if x != nil {
		return x.ReplyUserName
	}
	return ""
}

func (x *CommentData) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *CommentData) GetUserLike() string {
	if x != nil {
		return x.UserLike
	}
	return ""
}

type CommentsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments  []*CommentData    `protobuf:"bytes,1,rep,name=Comments,json=comments,proto3" json:"Comments,omitempty"`
	PagesInfo *helper.PagesInfo `protobuf:"bytes,2,opt,name=PagesInfo,json=pages_info,proto3" json:"PagesInfo,omitempty"`
}

func (x *CommentsData) Reset() {
	*x = CommentsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsData) ProtoMessage() {}

func (x *CommentsData) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsData.ProtoReflect.Descriptor instead.
func (*CommentsData) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{3}
}

func (x *CommentsData) GetComments() []*CommentData {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CommentsData) GetPagesInfo() *helper.PagesInfo {
	if x != nil {
		return x.PagesInfo
	}
	return nil
}

type CommentUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	UserName int64  `protobuf:"varint,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId   int64  `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MediaUrl string `protobuf:"bytes,4,opt,name=MediaUrl,proto3" json:"MediaUrl,omitempty"`
}

func (x *CommentUrl) Reset() {
	*x = CommentUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentUrl) ProtoMessage() {}

func (x *CommentUrl) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentUrl.ProtoReflect.Descriptor instead.
func (*CommentUrl) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{4}
}

func (x *CommentUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CommentUrl) GetUserName() int64 {
	if x != nil {
		return x.UserName
	}
	return 0
}

func (x *CommentUrl) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentUrl) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

type CommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaUrl string         `protobuf:"bytes,1,opt,name=MediaUrl,proto3" json:"MediaUrl,omitempty"`
	Page     *helper.Paging `protobuf:"bytes,2,opt,name=Page,proto3" json:"Page,omitempty"`
	// int32 PerPage = 2; // limit
	// int32 PageNumber = 3; // offset
	UserId     int64           `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CommentUrl string          `protobuf:"bytes,4,opt,name=CommentUrl,proto3" json:"CommentUrl,omitempty"`
	Sort       helper.SortType `protobuf:"varint,5,opt,name=Sort,proto3,enum=helper.SortType" json:"Sort,omitempty"`
}

func (x *CommentReq) Reset() {
	*x = CommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReq) ProtoMessage() {}

func (x *CommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReq.ProtoReflect.Descriptor instead.
func (*CommentReq) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{5}
}

func (x *CommentReq) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *CommentReq) GetPage() *helper.Paging {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentReq) GetCommentUrl() string {
	if x != nil {
		return x.CommentUrl
	}
	return ""
}

func (x *CommentReq) GetSort() helper.SortType {
	if x != nil {
		return x.Sort
	}
	return helper.SortType(0)
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Res:
	//
	//	*Response_Comment
	//	*Response_Err
	//	*Response_Empty
	//	*Response_Comments
	//	*Response_FullComment
	Res isResponse_Res `protobuf_oneof:"Res"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{6}
}

func (m *Response) GetRes() isResponse_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (x *Response) GetComment() *CommentData {
	if x, ok := x.GetRes().(*Response_Comment); ok {
		return x.Comment
	}
	return nil
}

func (x *Response) GetErr() *helper.HttpError {
	if x, ok := x.GetRes().(*Response_Err); ok {
		return x.Err
	}
	return nil
}

func (x *Response) GetEmpty() *helper.Empty {
	if x, ok := x.GetRes().(*Response_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Response) GetComments() *CommentsData {
	if x, ok := x.GetRes().(*Response_Comments); ok {
		return x.Comments
	}
	return nil
}

func (x *Response) GetFullComment() *FullCommentData {
	if x, ok := x.GetRes().(*Response_FullComment); ok {
		return x.FullComment
	}
	return nil
}

type isResponse_Res interface {
	isResponse_Res()
}

type Response_Comment struct {
	Comment *CommentData `protobuf:"bytes,1,opt,name=Comment,proto3,oneof"`
}

type Response_Err struct {
	Err *helper.HttpError `protobuf:"bytes,2,opt,name=Err,proto3,oneof"`
}

type Response_Empty struct {
	Empty *helper.Empty `protobuf:"bytes,3,opt,name=empty,proto3,oneof"`
}

type Response_Comments struct {
	Comments *CommentsData `protobuf:"bytes,4,opt,name=Comments,proto3,oneof"`
}

type Response_FullComment struct {
	FullComment *FullCommentData `protobuf:"bytes,5,opt,name=FullComment,proto3,oneof"`
}

func (*Response_Comment) isResponse_Res() {}

func (*Response_Err) isResponse_Res() {}

func (*Response_Empty) isResponse_Res() {}

func (*Response_Comments) isResponse_Res() {}

func (*Response_FullComment) isResponse_Res() {}

var File_comment_proto protoreflect.FileDescriptor

var file_comment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86,
	0x06, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x12, 0x22, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x12, 0x1b, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x72, 0x61, 0x65,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x12, 0x22, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x22, 0x72, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12,
	0x22, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x22, 0x84, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x03, 0x45, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x32, 0x8a, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0f, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x7a, 0x61, 0x66, 0x2f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x70, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_comment_proto_rawDescOnce sync.Once
	file_comment_proto_rawDescData = file_comment_proto_rawDesc
)

func file_comment_proto_rawDescGZIP() []byte {
	file_comment_proto_rawDescOnce.Do(func() {
		file_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_comment_proto_rawDescData)
	})
	return file_comment_proto_rawDescData
}

var file_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_comment_proto_goTypes = []interface{}{
	(*EditCommentData)(nil),  // 0: comment.EditCommentData
	(*FullCommentData)(nil),  // 1: comment.FullCommentData
	(*CommentData)(nil),      // 2: comment.CommentData
	(*CommentsData)(nil),     // 3: comment.CommentsData
	(*CommentUrl)(nil),       // 4: comment.CommentUrl
	(*CommentReq)(nil),       // 5: comment.CommentReq
	(*Response)(nil),         // 6: comment.Response
	(*helper.PagesInfo)(nil), // 7: helper.PagesInfo
	(*helper.Paging)(nil),    // 8: helper.Paging
	(helper.SortType)(0),     // 9: helper.SortType
	(*helper.HttpError)(nil), // 10: helper.HttpError
	(*helper.Empty)(nil),     // 11: helper.Empty
	(*helper.LikeReq)(nil),   // 12: helper.LikeReq
}
var file_comment_proto_depIdxs = []int32{
	2,  // 0: comment.CommentsData.Comments:type_name -> comment.CommentData
	7,  // 1: comment.CommentsData.PagesInfo:type_name -> helper.PagesInfo
	8,  // 2: comment.CommentReq.Page:type_name -> helper.Paging
	9,  // 3: comment.CommentReq.Sort:type_name -> helper.SortType
	2,  // 4: comment.Response.Comment:type_name -> comment.CommentData
	10, // 5: comment.Response.Err:type_name -> helper.HttpError
	11, // 6: comment.Response.empty:type_name -> helper.Empty
	3,  // 7: comment.Response.Comments:type_name -> comment.CommentsData
	1,  // 8: comment.Response.FullComment:type_name -> comment.FullCommentData
	4,  // 9: comment.CommentService.GetCommentByUrl:input_type -> comment.CommentUrl
	5,  // 10: comment.CommentService.GetCommentsOfMedia:input_type -> comment.CommentReq
	5,  // 11: comment.CommentService.GetRepliesOfComment:input_type -> comment.CommentReq
	5,  // 12: comment.CommentService.GetCommentsOfUserInMedia:input_type -> comment.CommentReq
	5,  // 13: comment.CommentService.GetAllCommentsOfUser:input_type -> comment.CommentReq
	0,  // 14: comment.CommentService.CreateComment:input_type -> comment.EditCommentData
	0,  // 15: comment.CommentService.EditComment:input_type -> comment.EditCommentData
	0,  // 16: comment.CommentService.DeleteComment:input_type -> comment.EditCommentData
	12, // 17: comment.CommentService.CreateLikeComment:input_type -> helper.LikeReq
	12, // 18: comment.CommentService.DeleteLikeComment:input_type -> helper.LikeReq
	6,  // 19: comment.CommentService.GetCommentByUrl:output_type -> comment.Response
	6,  // 20: comment.CommentService.GetCommentsOfMedia:output_type -> comment.Response
	6,  // 21: comment.CommentService.GetRepliesOfComment:output_type -> comment.Response
	6,  // 22: comment.CommentService.GetCommentsOfUserInMedia:output_type -> comment.Response
	6,  // 23: comment.CommentService.GetAllCommentsOfUser:output_type -> comment.Response
	6,  // 24: comment.CommentService.CreateComment:output_type -> comment.Response
	6,  // 25: comment.CommentService.EditComment:output_type -> comment.Response
	6,  // 26: comment.CommentService.DeleteComment:output_type -> comment.Response
	6,  // 27: comment.CommentService.CreateLikeComment:output_type -> comment.Response
	6,  // 28: comment.CommentService.DeleteLikeComment:output_type -> comment.Response
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_comment_proto_init() }
func file_comment_proto_init() {
	if File_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_comment_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Response_Comment)(nil),
		(*Response_Err)(nil),
		(*Response_Empty)(nil),
		(*Response_Comments)(nil),
		(*Response_FullComment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_proto_goTypes,
		DependencyIndexes: file_comment_proto_depIdxs,
		MessageInfos:      file_comment_proto_msgTypes,
	}.Build()
	File_comment_proto = out.File
	file_comment_proto_rawDesc = nil
	file_comment_proto_goTypes = nil
	file_comment_proto_depIdxs = nil
}
