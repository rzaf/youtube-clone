// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: comment.proto

package comment

import (
	context "context"
	helper "github.com/rzaf/youtube-clone/database/pbs/helper"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	GetCommentByUrl(ctx context.Context, in *CommentUrl, opts ...grpc.CallOption) (*Response, error)
	GetCommentsOfMedia(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
	GetRepliesOfComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
	GetCommentsOfUserInMedia(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
	GetAllCommentsOfUser(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
	CreateComment(ctx context.Context, in *EditCommentData, opts ...grpc.CallOption) (*Response, error)
	EditComment(ctx context.Context, in *EditCommentData, opts ...grpc.CallOption) (*Response, error)
	DeleteComment(ctx context.Context, in *EditCommentData, opts ...grpc.CallOption) (*Response, error)
	CreateLikeComment(ctx context.Context, in *helper.LikeReq, opts ...grpc.CallOption) (*Response, error)
	DeleteLikeComment(ctx context.Context, in *helper.LikeReq, opts ...grpc.CallOption) (*Response, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) GetCommentByUrl(ctx context.Context, in *CommentUrl, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/GetCommentByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentsOfMedia(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/GetCommentsOfMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetRepliesOfComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/GetRepliesOfComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentsOfUserInMedia(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/GetCommentsOfUserInMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetAllCommentsOfUser(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/GetAllCommentsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CreateComment(ctx context.Context, in *EditCommentData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) EditComment(ctx context.Context, in *EditCommentData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/EditComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *EditCommentData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CreateLikeComment(ctx context.Context, in *helper.LikeReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/CreateLikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteLikeComment(ctx context.Context, in *helper.LikeReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/comment.CommentService/DeleteLikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	GetCommentByUrl(context.Context, *CommentUrl) (*Response, error)
	GetCommentsOfMedia(context.Context, *CommentReq) (*Response, error)
	GetRepliesOfComment(context.Context, *CommentReq) (*Response, error)
	GetCommentsOfUserInMedia(context.Context, *CommentReq) (*Response, error)
	GetAllCommentsOfUser(context.Context, *CommentReq) (*Response, error)
	CreateComment(context.Context, *EditCommentData) (*Response, error)
	EditComment(context.Context, *EditCommentData) (*Response, error)
	DeleteComment(context.Context, *EditCommentData) (*Response, error)
	CreateLikeComment(context.Context, *helper.LikeReq) (*Response, error)
	DeleteLikeComment(context.Context, *helper.LikeReq) (*Response, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) GetCommentByUrl(context.Context, *CommentUrl) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByUrl not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentsOfMedia(context.Context, *CommentReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsOfMedia not implemented")
}
func (UnimplementedCommentServiceServer) GetRepliesOfComment(context.Context, *CommentReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepliesOfComment not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentsOfUserInMedia(context.Context, *CommentReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsOfUserInMedia not implemented")
}
func (UnimplementedCommentServiceServer) GetAllCommentsOfUser(context.Context, *CommentReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCommentsOfUser not implemented")
}
func (UnimplementedCommentServiceServer) CreateComment(context.Context, *EditCommentData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServiceServer) EditComment(context.Context, *EditCommentData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *EditCommentData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) CreateLikeComment(context.Context, *helper.LikeReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLikeComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteLikeComment(context.Context, *helper.LikeReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeComment not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_GetCommentByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetCommentByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentByUrl(ctx, req.(*CommentUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentsOfMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentsOfMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetCommentsOfMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentsOfMedia(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetRepliesOfComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetRepliesOfComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetRepliesOfComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetRepliesOfComment(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentsOfUserInMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentsOfUserInMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetCommentsOfUserInMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentsOfUserInMedia(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetAllCommentsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetAllCommentsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetAllCommentsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetAllCommentsOfUser(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateComment(ctx, req.(*EditCommentData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/EditComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).EditComment(ctx, req.(*EditCommentData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*EditCommentData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CreateLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helper.LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/CreateLikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateLikeComment(ctx, req.(*helper.LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helper.LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/DeleteLikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteLikeComment(ctx, req.(*helper.LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentByUrl",
			Handler:    _CommentService_GetCommentByUrl_Handler,
		},
		{
			MethodName: "GetCommentsOfMedia",
			Handler:    _CommentService_GetCommentsOfMedia_Handler,
		},
		{
			MethodName: "GetRepliesOfComment",
			Handler:    _CommentService_GetRepliesOfComment_Handler,
		},
		{
			MethodName: "GetCommentsOfUserInMedia",
			Handler:    _CommentService_GetCommentsOfUserInMedia_Handler,
		},
		{
			MethodName: "GetAllCommentsOfUser",
			Handler:    _CommentService_GetAllCommentsOfUser_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _CommentService_CreateComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _CommentService_EditComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
		{
			MethodName: "CreateLikeComment",
			Handler:    _CommentService_CreateLikeComment_Handler,
		},
		{
			MethodName: "DeleteLikeComment",
			Handler:    _CommentService_DeleteLikeComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
