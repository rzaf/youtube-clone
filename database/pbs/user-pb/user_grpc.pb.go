// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: github.com/rzaf/youtube-clone/database/pbs/user.proto

package user_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// rpc GetUserById(UserId) returns (Response){};
	GetUserByUsername(ctx context.Context, in *UsernameAndId, opts ...grpc.CallOption) (*Response, error)
	GetUserByNameAndPassword(ctx context.Context, in *UsernameAndPassword, opts ...grpc.CallOption) (*Response, error)
	GetUserByApikey(ctx context.Context, in *UserApikey, opts ...grpc.CallOption) (*Response, error)
	GetUsers(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*Response, error)
	SearchUsers(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*Response, error)
	EditUser(ctx context.Context, in *EditUserData, opts ...grpc.CallOption) (*Response, error)
	VerifyUserEmail(ctx context.Context, in *EmailCode, opts ...grpc.CallOption) (*Response, error)
	ResendEmailVerification(ctx context.Context, in *UsernameAndEmail, opts ...grpc.CallOption) (*Response, error)
	SetUserPhoto(ctx context.Context, in *UserPhoto, opts ...grpc.CallOption) (*Response, error)
	EditUserApiKey(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *EditUserData, opts ...grpc.CallOption) (*Response, error)
	CreateFollow(ctx context.Context, in *FollowData, opts ...grpc.CallOption) (*Response, error)
	DeleteFollow(ctx context.Context, in *FollowData, opts ...grpc.CallOption) (*Response, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserByUsername(ctx context.Context, in *UsernameAndId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByNameAndPassword(ctx context.Context, in *UsernameAndPassword, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUserByNameAndPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByApikey(ctx context.Context, in *UserApikey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUserByApikey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUsers(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditUser(ctx context.Context, in *EditUserData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/EditUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyUserEmail(ctx context.Context, in *EmailCode, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/VerifyUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResendEmailVerification(ctx context.Context, in *UsernameAndEmail, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/ResendEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetUserPhoto(ctx context.Context, in *UserPhoto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/SetUserPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditUserApiKey(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/EditUserApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *EditUserData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateFollow(ctx context.Context, in *FollowData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/CreateFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteFollow(ctx context.Context, in *FollowData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/DeleteFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// rpc GetUserById(UserId) returns (Response){};
	GetUserByUsername(context.Context, *UsernameAndId) (*Response, error)
	GetUserByNameAndPassword(context.Context, *UsernameAndPassword) (*Response, error)
	GetUserByApikey(context.Context, *UserApikey) (*Response, error)
	GetUsers(context.Context, *UserReq) (*Response, error)
	SearchUsers(context.Context, *UserReq) (*Response, error)
	EditUser(context.Context, *EditUserData) (*Response, error)
	VerifyUserEmail(context.Context, *EmailCode) (*Response, error)
	ResendEmailVerification(context.Context, *UsernameAndEmail) (*Response, error)
	SetUserPhoto(context.Context, *UserPhoto) (*Response, error)
	EditUserApiKey(context.Context, *UserId) (*Response, error)
	DeleteUser(context.Context, *UserId) (*Response, error)
	CreateUser(context.Context, *EditUserData) (*Response, error)
	CreateFollow(context.Context, *FollowData) (*Response, error)
	DeleteFollow(context.Context, *FollowData) (*Response, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserByUsername(context.Context, *UsernameAndId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedUserServiceServer) GetUserByNameAndPassword(context.Context, *UsernameAndPassword) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNameAndPassword not implemented")
}
func (UnimplementedUserServiceServer) GetUserByApikey(context.Context, *UserApikey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByApikey not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *UserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) SearchUsers(context.Context, *UserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedUserServiceServer) EditUser(context.Context, *EditUserData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedUserServiceServer) VerifyUserEmail(context.Context, *EmailCode) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserEmail not implemented")
}
func (UnimplementedUserServiceServer) ResendEmailVerification(context.Context, *UsernameAndEmail) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailVerification not implemented")
}
func (UnimplementedUserServiceServer) SetUserPhoto(context.Context, *UserPhoto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPhoto not implemented")
}
func (UnimplementedUserServiceServer) EditUserApiKey(context.Context, *UserId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserApiKey not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *UserId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *EditUserData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) CreateFollow(context.Context, *FollowData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (UnimplementedUserServiceServer) DeleteFollow(context.Context, *FollowData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollow not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameAndId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByUsername(ctx, req.(*UsernameAndId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByNameAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameAndPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByNameAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUserByNameAndPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByNameAndPassword(ctx, req.(*UsernameAndPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUserByApikey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByApikey(ctx, req.(*UserApikey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUsers(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/EditUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditUser(ctx, req.(*EditUserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/VerifyUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyUserEmail(ctx, req.(*EmailCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameAndEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/ResendEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResendEmailVerification(ctx, req.(*UsernameAndEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/SetUserPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetUserPhoto(ctx, req.(*UserPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditUserApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditUserApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/EditUserApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditUserApiKey(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*EditUserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/CreateFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateFollow(ctx, req.(*FollowData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/DeleteFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteFollow(ctx, req.(*FollowData))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUsername",
			Handler:    _UserService_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetUserByNameAndPassword",
			Handler:    _UserService_GetUserByNameAndPassword_Handler,
		},
		{
			MethodName: "GetUserByApikey",
			Handler:    _UserService_GetUserByApikey_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _UserService_SearchUsers_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _UserService_EditUser_Handler,
		},
		{
			MethodName: "VerifyUserEmail",
			Handler:    _UserService_VerifyUserEmail_Handler,
		},
		{
			MethodName: "ResendEmailVerification",
			Handler:    _UserService_ResendEmailVerification_Handler,
		},
		{
			MethodName: "SetUserPhoto",
			Handler:    _UserService_SetUserPhoto_Handler,
		},
		{
			MethodName: "EditUserApiKey",
			Handler:    _UserService_EditUserApiKey_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "CreateFollow",
			Handler:    _UserService_CreateFollow_Handler,
		},
		{
			MethodName: "DeleteFollow",
			Handler:    _UserService_DeleteFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rzaf/youtube-clone/database/pbs/user.proto",
}
