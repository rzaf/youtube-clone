// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: github.com/rzaf/youtube-clone/database/pbs/playlist.proto

package playlist

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	helper "github.com/rzaf/youtube-clone/database/pbs/helper"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlaylistShortData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Url             string `protobuf:"bytes,2,opt,name=Url,json=url,proto3" json:"Url,omitempty"`
	CreatorUsername string `protobuf:"bytes,3,opt,name=CreatorUsername,json=creator_username,proto3" json:"CreatorUsername,omitempty"`
	CreatedAt       int64  `protobuf:"varint,4,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	Thumbnail       string `protobuf:"bytes,5,opt,name=Thumbnail,json=thumbnail,proto3" json:"Thumbnail,omitempty"`
	// extra
	MediaCount       int64  `protobuf:"varint,6,opt,name=MediaCount,json=media_count,proto3" json:"MediaCount,omitempty"`
	CreatorProfile   string `protobuf:"bytes,7,opt,name=CreatorProfile,json=creator_profile,proto3" json:"CreatorProfile,omitempty"`
	MediasTotalViews int64  `protobuf:"varint,8,opt,name=MediasTotalViews,json=total_views,proto3" json:"MediasTotalViews,omitempty"`
}

func (x *PlaylistShortData) Reset() {
	*x = PlaylistShortData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistShortData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistShortData) ProtoMessage() {}

func (x *PlaylistShortData) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistShortData.ProtoReflect.Descriptor instead.
func (*PlaylistShortData) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{0}
}

func (x *PlaylistShortData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaylistShortData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PlaylistShortData) GetCreatorUsername() string {
	if x != nil {
		return x.CreatorUsername
	}
	return ""
}

func (x *PlaylistShortData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PlaylistShortData) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *PlaylistShortData) GetMediaCount() int64 {
	if x != nil {
		return x.MediaCount
	}
	return 0
}

func (x *PlaylistShortData) GetCreatorProfile() string {
	if x != nil {
		return x.CreatorProfile
	}
	return ""
}

func (x *PlaylistShortData) GetMediasTotalViews() int64 {
	if x != nil {
		return x.MediasTotalViews
	}
	return 0
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaTitle string `protobuf:"bytes,1,opt,name=MediaTitle,json=media_title,proto3" json:"MediaTitle,omitempty"`
	MediaUrl   string `protobuf:"bytes,2,opt,name=MediaUrl,json=media_url,proto3" json:"MediaUrl,omitempty"`
	// string  Username=3;
	MediaCreatorUsername string `protobuf:"bytes,3,opt,name=MediaCreatorUsername,json=media_creator_username,proto3" json:"MediaCreatorUsername,omitempty"`
	MediaCreatorProfile  string `protobuf:"bytes,4,opt,name=MediaCreatorProfile,json=media_creator_profile,proto3" json:"MediaCreatorProfile,omitempty"`
	Note                 string `protobuf:"bytes,5,opt,name=Note,json=note,proto3" json:"Note,omitempty"`
	Order                int32  `protobuf:"varint,6,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	CreatedAt            int64  `protobuf:"varint,7,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	MediaCreatedAt       int64  `protobuf:"varint,8,opt,name=MediaCreatedAt,json=media_created_at_unix,proto3" json:"MediaCreatedAt,omitempty"`
	MediaType            string `protobuf:"bytes,9,opt,name=MediaType,json=media_type,proto3" json:"MediaType,omitempty"`
	MediaThumbnail       string `protobuf:"bytes,10,opt,name=MediaThumbnail,json=media_thumbnail,proto3" json:"MediaThumbnail,omitempty"`
	MediaViews           int64  `protobuf:"varint,11,opt,name=MediaViews,json=media_total_views,proto3" json:"MediaViews,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{1}
}

func (x *Media) GetMediaTitle() string {
	if x != nil {
		return x.MediaTitle
	}
	return ""
}

func (x *Media) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *Media) GetMediaCreatorUsername() string {
	if x != nil {
		return x.MediaCreatorUsername
	}
	return ""
}

func (x *Media) GetMediaCreatorProfile() string {
	if x != nil {
		return x.MediaCreatorProfile
	}
	return ""
}

func (x *Media) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Media) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Media) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Media) GetMediaCreatedAt() int64 {
	if x != nil {
		return x.MediaCreatedAt
	}
	return 0
}

func (x *Media) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Media) GetMediaThumbnail() string {
	if x != nil {
		return x.MediaThumbnail
	}
	return ""
}

func (x *Media) GetMediaViews() int64 {
	if x != nil {
		return x.MediaViews
	}
	return 0
}

type PlaylistData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Url             string `protobuf:"bytes,2,opt,name=Url,json=url,proto3" json:"Url,omitempty"`
	CreatorUsername string `protobuf:"bytes,3,opt,name=CreatorUsername,json=creator_username,proto3" json:"CreatorUsername,omitempty"`
	CreatorProfile  string `protobuf:"bytes,4,opt,name=CreatorProfile,json=creator_profile,proto3" json:"CreatorProfile,omitempty"`
	CreatedAt       int64  `protobuf:"varint,5,opt,name=CreatedAt,json=created_at_unix,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       int64  `protobuf:"varint,6,opt,name=UpdatedAt,json=updated_at_unix,proto3" json:"UpdatedAt,omitempty"`
	Text            string `protobuf:"bytes,7,opt,name=Text,json=text,proto3" json:"Text,omitempty"`
	MediaType       string `protobuf:"bytes,8,opt,name=MediaType,json=media_type,proto3" json:"MediaType,omitempty"`
	// helper.MediaType    MediaTypeId=9   [json_name="media_type"];
	Thumbnail string `protobuf:"bytes,9,opt,name=Thumbnail,json=media_thumbnail,proto3" json:"Thumbnail,omitempty"`
	// extra
	MediaCount       int64 `protobuf:"varint,10,opt,name=MediaCount,json=medias_count,proto3" json:"MediaCount,omitempty"`
	MediasTotalViews int64 `protobuf:"varint,13,opt,name=MediasTotalViews,json=medias_total_views,proto3" json:"MediasTotalViews,omitempty"` // repeated Video PlaylistMedias=8;
}

func (x *PlaylistData) Reset() {
	*x = PlaylistData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistData) ProtoMessage() {}

func (x *PlaylistData) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistData.ProtoReflect.Descriptor instead.
func (*PlaylistData) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{2}
}

func (x *PlaylistData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaylistData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PlaylistData) GetCreatorUsername() string {
	if x != nil {
		return x.CreatorUsername
	}
	return ""
}

func (x *PlaylistData) GetCreatorProfile() string {
	if x != nil {
		return x.CreatorProfile
	}
	return ""
}

func (x *PlaylistData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PlaylistData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PlaylistData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PlaylistData) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *PlaylistData) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *PlaylistData) GetMediaCount() int64 {
	if x != nil {
		return x.MediaCount
	}
	return 0
}

func (x *PlaylistData) GetMediasTotalViews() int64 {
	if x != nil {
		return x.MediasTotalViews
	}
	return 0
}

type EditPlaylistData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Url           string           `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	Text          string           `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	CurrentUserId int64            `protobuf:"varint,4,opt,name=CurrentUserId,proto3" json:"CurrentUserId,omitempty"`
	MediaTypeId   helper.MediaType `protobuf:"varint,5,opt,name=MediaTypeId,proto3,enum=helper.MediaType" json:"MediaTypeId,omitempty"`
}

func (x *EditPlaylistData) Reset() {
	*x = EditPlaylistData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditPlaylistData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditPlaylistData) ProtoMessage() {}

func (x *EditPlaylistData) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditPlaylistData.ProtoReflect.Descriptor instead.
func (*EditPlaylistData) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{3}
}

func (x *EditPlaylistData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditPlaylistData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EditPlaylistData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EditPlaylistData) GetCurrentUserId() int64 {
	if x != nil {
		return x.CurrentUserId
	}
	return 0
}

func (x *EditPlaylistData) GetMediaTypeId() helper.MediaType {
	if x != nil {
		return x.MediaTypeId
	}
	return helper.MediaType(0)
}

type PlaylistsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*PlaylistShortData `protobuf:"bytes,1,rep,name=Playlists,json=playlists,proto3" json:"Playlists,omitempty"`
	PagesInfo *helper.PagesInfo    `protobuf:"bytes,2,opt,name=PagesInfo,json=pages_info,proto3" json:"PagesInfo,omitempty"`
}

func (x *PlaylistsData) Reset() {
	*x = PlaylistsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistsData) ProtoMessage() {}

func (x *PlaylistsData) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistsData.ProtoReflect.Descriptor instead.
func (*PlaylistsData) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{4}
}

func (x *PlaylistsData) GetPlaylists() []*PlaylistShortData {
	if x != nil {
		return x.Playlists
	}
	return nil
}

func (x *PlaylistsData) GetPagesInfo() *helper.PagesInfo {
	if x != nil {
		return x.PagesInfo
	}
	return nil
}

type PlaylistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistUrl string          `protobuf:"bytes,1,opt,name=PlaylistUrl,proto3" json:"PlaylistUrl,omitempty"`
	Page        *helper.Paging  `protobuf:"bytes,2,opt,name=Page,proto3" json:"Page,omitempty"`
	UserId      int64           `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Username    string          `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Sort        helper.SortType `protobuf:"varint,5,opt,name=Sort,proto3,enum=helper.SortType" json:"Sort,omitempty"`
	SearchTerm  string          `protobuf:"bytes,6,opt,name=SearchTerm,proto3" json:"SearchTerm,omitempty"`
}

func (x *PlaylistReq) Reset() {
	*x = PlaylistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistReq) ProtoMessage() {}

func (x *PlaylistReq) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistReq.ProtoReflect.Descriptor instead.
func (*PlaylistReq) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{5}
}

func (x *PlaylistReq) GetPlaylistUrl() string {
	if x != nil {
		return x.PlaylistUrl
	}
	return ""
}

func (x *PlaylistReq) GetPage() *helper.Paging {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PlaylistReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlaylistReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlaylistReq) GetSort() helper.SortType {
	if x != nil {
		return x.Sort
	}
	return helper.SortType(0)
}

func (x *PlaylistReq) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

type PlaylistMediasData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistMedias []*Media          `protobuf:"bytes,1,rep,name=PlaylistMedias,json=playlist_medias,proto3" json:"PlaylistMedias,omitempty"`
	PagesInfo      *helper.PagesInfo `protobuf:"bytes,2,opt,name=PagesInfo,json=pages_info,proto3" json:"PagesInfo,omitempty"`
}

func (x *PlaylistMediasData) Reset() {
	*x = PlaylistMediasData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistMediasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistMediasData) ProtoMessage() {}

func (x *PlaylistMediasData) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistMediasData.ProtoReflect.Descriptor instead.
func (*PlaylistMediasData) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{6}
}

func (x *PlaylistMediasData) GetPlaylistMedias() []*Media {
	if x != nil {
		return x.PlaylistMedias
	}
	return nil
}

func (x *PlaylistMediasData) GetPagesInfo() *helper.PagesInfo {
	if x != nil {
		return x.PagesInfo
	}
	return nil
}

type PlaylistMediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistUrl string         `protobuf:"bytes,1,opt,name=PlaylistUrl,proto3" json:"PlaylistUrl,omitempty"`
	Page        *helper.Paging `protobuf:"bytes,2,opt,name=Page,proto3" json:"Page,omitempty"`
	UserId      int64          `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MediaUrl    string         `protobuf:"bytes,4,opt,name=MediaUrl,proto3" json:"MediaUrl,omitempty"`
	Order       int64          `protobuf:"varint,5,opt,name=Order,proto3" json:"Order,omitempty"`
	Note        string         `protobuf:"bytes,6,opt,name=Note,proto3" json:"Note,omitempty"`
}

func (x *PlaylistMediaReq) Reset() {
	*x = PlaylistMediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistMediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistMediaReq) ProtoMessage() {}

func (x *PlaylistMediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistMediaReq.ProtoReflect.Descriptor instead.
func (*PlaylistMediaReq) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{7}
}

func (x *PlaylistMediaReq) GetPlaylistUrl() string {
	if x != nil {
		return x.PlaylistUrl
	}
	return ""
}

func (x *PlaylistMediaReq) GetPage() *helper.Paging {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PlaylistMediaReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlaylistMediaReq) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *PlaylistMediaReq) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *PlaylistMediaReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Res:
	//
	//	*Response_Playlist
	//	*Response_Err
	//	*Response_Empty
	//	*Response_Playlists
	//	*Response_Medias
	Res isResponse_Res `protobuf_oneof:"Res"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_youtube_clone_database_pbs_playlist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP(), []int{8}
}

func (m *Response) GetRes() isResponse_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (x *Response) GetPlaylist() *PlaylistData {
	if x, ok := x.GetRes().(*Response_Playlist); ok {
		return x.Playlist
	}
	return nil
}

func (x *Response) GetErr() *helper.HttpError {
	if x, ok := x.GetRes().(*Response_Err); ok {
		return x.Err
	}
	return nil
}

func (x *Response) GetEmpty() *helper.Empty {
	if x, ok := x.GetRes().(*Response_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Response) GetPlaylists() *PlaylistsData {
	if x, ok := x.GetRes().(*Response_Playlists); ok {
		return x.Playlists
	}
	return nil
}

func (x *Response) GetMedias() *PlaylistMediasData {
	if x, ok := x.GetRes().(*Response_Medias); ok {
		return x.Medias
	}
	return nil
}

type isResponse_Res interface {
	isResponse_Res()
}

type Response_Playlist struct {
	Playlist *PlaylistData `protobuf:"bytes,1,opt,name=Playlist,proto3,oneof"`
}

type Response_Err struct {
	Err *helper.HttpError `protobuf:"bytes,2,opt,name=Err,proto3,oneof"`
}

type Response_Empty struct {
	Empty *helper.Empty `protobuf:"bytes,3,opt,name=empty,proto3,oneof"`
}

type Response_Playlists struct {
	Playlists *PlaylistsData `protobuf:"bytes,4,opt,name=Playlists,proto3,oneof"`
}

type Response_Medias struct {
	Medias *PlaylistMediasData `protobuf:"bytes,5,opt,name=Medias,proto3,oneof"`
}

func (*Response_Playlist) isResponse_Res() {}

func (*Response_Err) isResponse_Res() {}

func (*Response_Empty) isResponse_Res() {}

func (*Response_Playlists) isResponse_Res() {}

func (*Response_Medias) isResponse_Res() {}

var File_youtube_clone_database_pbs_playlist_proto protoreflect.FileDescriptor

var file_youtube_clone_database_pbs_playlist_proto_rawDesc = []byte{
	0x0a, 0x29, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x27, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x2d, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x62,
	0x73, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97,
	0x02, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x25, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x1f, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x12, 0x34, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x09,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x22, 0xa7, 0x01, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x6f, 0x74, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x45, 0x72, 0x72, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x32, 0xb6, 0x05,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x12,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x17, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62,
	0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x70, 0x62, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_youtube_clone_database_pbs_playlist_proto_rawDescOnce sync.Once
	file_youtube_clone_database_pbs_playlist_proto_rawDescData = file_youtube_clone_database_pbs_playlist_proto_rawDesc
)

func file_youtube_clone_database_pbs_playlist_proto_rawDescGZIP() []byte {
	file_youtube_clone_database_pbs_playlist_proto_rawDescOnce.Do(func() {
		file_youtube_clone_database_pbs_playlist_proto_rawDescData = protoimpl.X.CompressGZIP(file_youtube_clone_database_pbs_playlist_proto_rawDescData)
	})
	return file_youtube_clone_database_pbs_playlist_proto_rawDescData
}

var file_youtube_clone_database_pbs_playlist_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_youtube_clone_database_pbs_playlist_proto_goTypes = []interface{}{
	(*PlaylistShortData)(nil),  // 0: playlist.PlaylistShortData
	(*Media)(nil),              // 1: playlist.Media
	(*PlaylistData)(nil),       // 2: playlist.PlaylistData
	(*EditPlaylistData)(nil),   // 3: playlist.EditPlaylistData
	(*PlaylistsData)(nil),      // 4: playlist.PlaylistsData
	(*PlaylistReq)(nil),        // 5: playlist.PlaylistReq
	(*PlaylistMediasData)(nil), // 6: playlist.PlaylistMediasData
	(*PlaylistMediaReq)(nil),   // 7: playlist.PlaylistMediaReq
	(*Response)(nil),           // 8: playlist.Response
	(helper.MediaType)(0),      // 9: helper.MediaType
	(*helper.PagesInfo)(nil),   // 10: helper.PagesInfo
	(*helper.Paging)(nil),      // 11: helper.Paging
	(helper.SortType)(0),       // 12: helper.SortType
	(*helper.HttpError)(nil),   // 13: helper.HttpError
	(*helper.Empty)(nil),       // 14: helper.Empty
}
var file_youtube_clone_database_pbs_playlist_proto_depIdxs = []int32{
	9,  // 0: playlist.EditPlaylistData.MediaTypeId:type_name -> helper.MediaType
	0,  // 1: playlist.PlaylistsData.Playlists:type_name -> playlist.PlaylistShortData
	10, // 2: playlist.PlaylistsData.PagesInfo:type_name -> helper.PagesInfo
	11, // 3: playlist.PlaylistReq.Page:type_name -> helper.Paging
	12, // 4: playlist.PlaylistReq.Sort:type_name -> helper.SortType
	1,  // 5: playlist.PlaylistMediasData.PlaylistMedias:type_name -> playlist.Media
	10, // 6: playlist.PlaylistMediasData.PagesInfo:type_name -> helper.PagesInfo
	11, // 7: playlist.PlaylistMediaReq.Page:type_name -> helper.Paging
	2,  // 8: playlist.Response.Playlist:type_name -> playlist.PlaylistData
	13, // 9: playlist.Response.Err:type_name -> helper.HttpError
	14, // 10: playlist.Response.empty:type_name -> helper.Empty
	4,  // 11: playlist.Response.Playlists:type_name -> playlist.PlaylistsData
	6,  // 12: playlist.Response.Medias:type_name -> playlist.PlaylistMediasData
	5,  // 13: playlist.PlaylistService.GetPlaylist:input_type -> playlist.PlaylistReq
	5,  // 14: playlist.PlaylistService.GetPlaylists:input_type -> playlist.PlaylistReq
	5,  // 15: playlist.PlaylistService.SearchPlaylists:input_type -> playlist.PlaylistReq
	3,  // 16: playlist.PlaylistService.CreatePlaylist:input_type -> playlist.EditPlaylistData
	3,  // 17: playlist.PlaylistService.EditPlaylist:input_type -> playlist.EditPlaylistData
	3,  // 18: playlist.PlaylistService.DeletePlaylist:input_type -> playlist.EditPlaylistData
	5,  // 19: playlist.PlaylistService.GetPlaylistMedias:input_type -> playlist.PlaylistReq
	7,  // 20: playlist.PlaylistService.AddMediaToPlaylist:input_type -> playlist.PlaylistMediaReq
	7,  // 21: playlist.PlaylistService.EditMediaFromPlaylist:input_type -> playlist.PlaylistMediaReq
	7,  // 22: playlist.PlaylistService.RemoveMediaFromPlaylist:input_type -> playlist.PlaylistMediaReq
	8,  // 23: playlist.PlaylistService.GetPlaylist:output_type -> playlist.Response
	8,  // 24: playlist.PlaylistService.GetPlaylists:output_type -> playlist.Response
	8,  // 25: playlist.PlaylistService.SearchPlaylists:output_type -> playlist.Response
	8,  // 26: playlist.PlaylistService.CreatePlaylist:output_type -> playlist.Response
	8,  // 27: playlist.PlaylistService.EditPlaylist:output_type -> playlist.Response
	8,  // 28: playlist.PlaylistService.DeletePlaylist:output_type -> playlist.Response
	8,  // 29: playlist.PlaylistService.GetPlaylistMedias:output_type -> playlist.Response
	8,  // 30: playlist.PlaylistService.AddMediaToPlaylist:output_type -> playlist.Response
	8,  // 31: playlist.PlaylistService.EditMediaFromPlaylist:output_type -> playlist.Response
	8,  // 32: playlist.PlaylistService.RemoveMediaFromPlaylist:output_type -> playlist.Response
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_youtube_clone_database_pbs_playlist_proto_init() }
func file_youtube_clone_database_pbs_playlist_proto_init() {
	if File_youtube_clone_database_pbs_playlist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistShortData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditPlaylistData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistMediasData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistMediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_youtube_clone_database_pbs_playlist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_youtube_clone_database_pbs_playlist_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Response_Playlist)(nil),
		(*Response_Err)(nil),
		(*Response_Empty)(nil),
		(*Response_Playlists)(nil),
		(*Response_Medias)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_youtube_clone_database_pbs_playlist_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_youtube_clone_database_pbs_playlist_proto_goTypes,
		DependencyIndexes: file_youtube_clone_database_pbs_playlist_proto_depIdxs,
		MessageInfos:      file_youtube_clone_database_pbs_playlist_proto_msgTypes,
	}.Build()
	File_youtube_clone_database_pbs_playlist_proto = out.File
	file_youtube_clone_database_pbs_playlist_proto_rawDesc = nil
	file_youtube_clone_database_pbs_playlist_proto_goTypes = nil
	file_youtube_clone_database_pbs_playlist_proto_depIdxs = nil
}
